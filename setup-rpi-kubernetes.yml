---
- hosts: all
  become: true
  handlers:
    - name: restart docker
      service: name=docker state=restarted
  tasks:
    # Setup hosts file on all nodes
    - name: Setup hosts file (inventory hostnames)
      lineinfile: path=/etc/hosts regexp='.*{{ hostvars[item].hostname }}$' line="{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].hostname }}" state=present
      when: hostvars[item].ansible_default_ipv4.address is defined
      with_items: "{{ groups['all'] }}"

    - name: Setup hosts file (real hostnames)
      lineinfile: path=/etc/hosts regexp='.*{{ hostvars[item].ansible_hostname }}$' line="{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].ansible_hostname }}" state=present
      when: hostvars[item].ansible_default_ipv4.address is defined
      with_items: "{{ groups['all'] }}"

    - name: Setup shared hostname (picluster.local)
      lineinfile: path=/etc/hosts line="{{ hostvars[item].ansible_default_ipv4.address }} picluster.local" state=present
      when: hostvars[item].ansible_default_ipv4.address is defined
      with_items: "{{ groups['all'] }}"

    # Check if docker is running or install it otherwise
    - name: Check if docker is running
      command: docker run armhf/hello-world
      register: docker_running
      ignore_errors: yes

    - name: Download Docker install script
      get_url:
        url: https://get.docker.com
        dest: $HOME/install_docker.sh
      when: docker_running.failed

    - name: Run Docker install script
      command: sh $HOME/install_docker.sh
      when: docker_running.failed

    - name: Update Docker configuration to use systemd cgroups
      become: true
      copy:
        src: daemon.json
        dest: /etc/docker/daemon.json
      notify: restart docker

    # Disabling swap is required for k8
    - name: Permanently disable swap
      command: dphys-swapfile swapoff && dphys-swapfile uninstall && update-rc.d dphys-swapfile remove

    - name: Disable swap configuration
      lineinfile:
        path: /etc/dphys-swapfile
        regexp: '^CONF_SWAPSIZE='
        line: CONF_SWAPSIZE=0

    - name: Get Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    # Note: currently the latest repository is still xenial not bionic
    - name: Add Kubernetes APT repository
      apt_repository:
        repo: deb http://packages.cloud.google.com/apt/ kubernetes-xenial main
        state: present
        filename: 'kubernetes'

    - name: Install Kubernetes
      apt: 
        name: "{{ packages }}"
        update_cache: true
        state: present
      vars:
        packages:
        - kubelet
        - kubeadm


- hosts: kube-master
  become: yes
  tasks:
    - name: Install kubectl on master node
      apt:
        name: kubectl
        state: present

    # Initialize Cluster. The log is also used to prevent an second initialization
    - name: Initialize Cluster
      shell: "kubeadm init --pod-network-cidr=10.244.0.0/16 >> cluster_init.log"
      args:
        chdir: $HOME
        creates: cluster_init.log

    # Create the configuration / configuration directory
    - name: Create .kube directory
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: Copy admin.conf to the user's kube directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        remote_src: yes

    - name: Setup Flannel. Use log to prevent second installation
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml >> flannel_setup.log
      args:
        chdir: $HOME
        creates: flannel_setup.log

    - name: Create token to join cluster
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Set join command as fact
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"


- hosts: kube-node
  become: yes
  tasks:
    - name: Wait for master's port 6443
      wait_for: "host={{ hostvars[groups['kube-master'][0]].hostname }} port=6443 timeout=1"

    - name: Join the cluster. Use log to prevent joining twice
      shell: "{{ hostvars[groups['kube-master'][0]].join_command }} >> node_join.log"
      args:
        chdir: $HOME
        creates: node_join.log
